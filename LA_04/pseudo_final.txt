class UserInterface:
    def __init__(self):
        # initialize file, translator, and text variables

    def run_program(self):
        # update file variable with get_corpus_filename()
        # update text variable with get_source_text()
        # update translator variable with new instance of Translator using file and text variables as arguments
        # do translation with translate()

    def get_corpus_filename(self):
        # prompt the user with options
        # create selection variable
        # while selection is invalid:
        #     ask user to select an option
        #     catch ValueError and notify user
        #     notify user if selection is invalid
        # return 'etf.csv' if selection is 1, otherwise return 'fte.csv'

    def get_source_text(self):
        # create source variable
        # while source length is 0:
        #     update source variable with input from user
        # return source variable

    def translate(self):
        # read_corpus() in translator object
        # translate() in translator object


class Translator:
    def __init__(self, file: str, source: str):
        # initialize file variable from file argument, source variable from source argument, and an empty dictionary

    def read_corpus(self):
        # open file to read
        # for each line in file:
        #     strip newline character
        #     if line contains ',':
        #         update dictionary with first part of line as key, second part as value

    def translate(self):
        # create out variable
        # create capitalize_first variable with whether or not to capitalize the first letter
        # create last_chars variable to hold trailing punctuation
        # for each word in source text:
        #     add a space to out variable if it contains text
        #     add result of __lookup(word) to out variable
        # apply capitalization to first letter if necessary
        # apply trailing punctuation
        # print translated message

    def __lookup(self, word: str):
        # convert word to lowercase and strip non-word characters
        # if word is in dictionary, return value of word, otherwise return source word


def greeting():
    # display a greeting and a brief explanation of what the program does.


def main():
    # display greeting()
    # create running flag variable as True
    # while running flag is True:
    #     create UserInterface() instance
    #     run_program() in UserInterface() instance
    #     catch FileNotFoundError and display a message for the user
    #     ask the user if they would like to translate again and update the running flag


main()
